def is_safe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i,j in zip(range(row,-1,-1), range(col,-1,-1)):
        if board[i][j] == 1:
            return False
    for i,j in zip(range(row,8), range(col,-1,-1)):
        if board[i][j] == 1:
            return False
    return True

def solve(board, col):
    if col >= 8:
        print_board(board)
        return True
    res = False
    for i in range(8):
        if is_safe(board, i, col):
            board[i][col] = 1
            res = solve(board, col+1) or res
            board[i][col] = 0
    return res

def print_board(board):
    for row in board:
        print(["Q" if x==1 else "." for x in row])
    print()

board = [[0]*8 for _ in range(8)]
solve(board, 0)

Output 

['Q', '.', '.', '.', '.', '.', '.', '.']
['.', '.', '.', 'Q', '.', '.', '.', '.']
['.', '.', '.', '.', '.', '.', 'Q', '.']
['.', '.', 'Q', '.', '.', '.', '.', '.']
['.', '.', '.', '.', '.', 'Q', '.', '.']
['.', 'Q', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'Q', '.', '.', '.']
['.', '.', '.', '.', '.', '.', '.', 'Q']

['Q', '.', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', 'Q', '.', '.', '.']
['.', '.', '.', '.', '.', '.', 'Q', '.']
['.', '.', '.', 'Q', '.', '.', '.', '.']
['.', 'Q', '.', '.', '.', '.', '.', '.']
['.', '.', '.', '.', '.', 'Q', '.', '.']
['.', '.', 'Q', '.', '.', '.', '.', '.']
['.', '.', '.', '.', '.', '.', '.', 'Q']

...
