from collections import deque

def water_jug(jug1, jug2, target):
    visited = set()
    queue = deque()
    queue.append((0, 0, []))

    while queue:
        a, b, path = queue.popleft()
        if (a, b) in visited:
            continue
        visited.add((a, b))
        path = path + [(a, b)]
        if a == target or b == target:
            return path

        moves = [
            (jug1, b),
            (a, jug2),
            (0, b),
            (a, 0),
            (min(a+b, jug1), max(0, a+b-jug1)),
            (max(0, a+b-jug2), min(a+b, jug2))
        ]
        for move in moves:
            if move not in visited:
                queue.append((move[0], move[1], path))
    return None

solution = water_jug(4, 3, 2)
for step in solution:
    print(step)

Output

(0, 0)
(4, 0)
(1, 3)
(1, 0)
(0, 1)
(4, 1)
(2, 3)
